package day04;

public class Ex01 {
	
	// static 
	// : 함수 구성에 영향을 주는 것은 아님.
	// - static 함수에서 호출하는 함수는 static 속성을 가지고 있어야 함
	
	static int pow(int num, int count) {	// 매개변수 선언 -> num^count 
		int result = 1;	// result 값 준비
		for(int i = 0; i < count; i++) {	// 거듭제곱을 구하는 반복문
			result *= num;
		}
		return result;	// result 값 반환 -> 함수를 호출한 위치로 돌아감
	}
	
	
	public static void main(String[] args) {
		// 함수 : 특정 값을 만들어내는 수식 (코드의 묶음)
		// x값에 따라서, 서로 다른 y값을 계산하여 반환하는 코드의 묶음
		// y   =  f    (x)
		// 반환값  함수이름(매개변수)
		
		// 함수 = function = 기능
		// - 객체의 움직임을 표현함
		//  -> 어떤 동작(행위)을 정의함
		// - 자주 사용하는 코드들을 함수로 만듦 -> 필요할 때마다 사용할 수 있음
		
		
		// 함수의 구성요소
		
		// 함수의 정의 : 함수의 형태를 정의한다. 반환 자료형, 함수 이름, 매개변수를 작성하고,
		//			 함수가 실행되면 수행할 코드를 {} 안 쪽에 작성한다.
		//			 함수는 마지막에 반환자료형에 맞는 값을 반드시 return 해야한다.
		
		// 함수의 호출 : 이미 정의되어 있는 함수의 이름을 부르면서(call) 인자값을 전달함
		//			 함수를 호출하면 정의된 내용을 수행하고, 결과값을 호출자리로 반환함
		
		// 			- 함수를 실행하기 위해 함수를 불러냄
		// 			-> 호출을 하기 위해선 미리 함수가 정의되어 있어야 함
		
		// 메서드  오버로딩 : 함수의 이름이 겹침
		
		// - 자바의 함수는 반드시 반환 자료형에 명시된 값을 반환해야 함.
		// - 제어문에 의해 분기가 나누어 지더라도, 반드시 반환값을 처리해주어야 함.
		//   -> 함수를 출력할 때, 반화하는 변수의 자료형을 맞춰야 하기 때문임
		//   -> 반환 자료형 : 반환하는 변수의 자료형과 같음 = 함수의 자료형
		
		
		// 가급적이면 변수와 함수의 이름은 겹치지 않도록 할 것.
		
		
		
		
		int n1 = pow(2, 10);	// 인수(인자) : 결과값을 결정하는 요인이 되는 값
								// -> 매개변수 : 함수 외부와 내부를 이어주는 매개체가 되는 값

								// num = 2, count = 10;
		
		System.out.println("n1 = " + n1);
		
		
		// 연습문제) 정수의 절대값을 반환하는 함수 abs를 작성하여 테스트하세요.
		
		// 여기서 함수 호출 코드를 작성합니다.

		int a1 = abs(-7);
		int a2 = abs(6);
		
		// 결과를 출력합니다.
		
		System.out.println("a1 = " + a1);
		System.out.println("a2 = " + a2);
		
		
		
	}
	
	// 절대값을 반환하는 함수를 여기 아래에 작성(정의) 합니다.
	
	static int abs(int num) {
		int result;
		if(num < 0) {
			result = num * -1; 
		} else {
			result = num;
		}
		
		return result;
	}
	
	
	
}
